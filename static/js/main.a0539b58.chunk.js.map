{"version":3,"sources":["forms/AddUserForm.js","forms/EditUserForm.js","tables/UserTable.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","initialFormState","id","name","age","useState","user","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","addUser","type","onChange","EditUserForm","currentUser","useEffect","updateUser","onClick","setEditing","className","UserTable","users","length","map","key","editRow","deleteUser","colSpan","App","setUsers","username","setCurrentUser","editing","o","JSON","parse","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0539b58.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst AddUserForm = props => {\n  const initialFormState = { id: null, name: '', age: '' }\n  const [user, setUser] = useState(initialFormState)\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n        if (!user.name || !user.age) return\n\n        props.addUser(user)\n        setUser(initialFormState)\n      }}\n    >\n      <label>昵称</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>年龄</label>\n      <input type=\"text\" name=\"age\" value={user.age} onChange={handleInputChange} />\n      <button>添加</button>\n    </form>\n  )\n}\n\nexport default AddUserForm\n","import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [props]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>昵称</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>年龄</label>\n      <input type=\"text\" name=\"age\" value={user.age} onChange={handleInputChange} />\n      <button>更改</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        取消\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm\n","import React from 'react'\n\nconst UserTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>昵称</th>\n        <th>年龄</th>\n        <th>操作</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.users.length > 0 ? (\n        props.users.map(user => (\n          <tr key={user.id}>\n            <td>{user.name}</td>\n            <td>{user.age}</td>\n            <td>\n              <button\n                onClick={() => {\n                  props.editRow(user)\n                }}\n                className=\"button muted-button\"\n              >\n                编辑\n              </button>\n              <button\n                onClick={() => props.deleteUser(user.id)}\n                className=\"button muted-button\"\n              >\n                删除\n              </button>\n            </td>\n          </tr>\n        ))\n      ) : (\n          <tr>\n            <td colSpan={3}>无用户信息，请添加</td>\n          </tr>\n        )}\n    </tbody>\n  </table>\n)\n\nexport default UserTable\n","import React, { useState, Fragment } from 'react'\nimport './App.css';\nimport AddUserForm from './forms/AddUserForm'\nimport EditUserForm from './forms/EditUserForm'\nimport UserTable from './tables/UserTable'\n\nconst cloneDeep = o => JSON.parse(JSON.stringify(o))\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: 'william', age: 21 },\n    { id: 2, name: 'mike', age: 21 },\n  ]\n\n  const initialFormState = { id: null, name: '', username: '' }\n\n  // 设置状态\n  const [users, setUsers] = useState(usersData)\n  const [currentUser, setCurrentUser] = useState(initialFormState)\n  const [editing, setEditing] = useState(false)\n\n  // CRUD\n  const addUser = user => {\n    user.id = user\n  }\n\n  const deleteUser = id => {\n    setEditing(false)\n\n    setUsers(users.filter(user => user.id !== id))\n  }\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false)\n\n    setUsers(users.map(user => (user.id === id ? updateUser : user)))\n  }\n\n  const editRow = user => {\n    setEditing(true)\n\n    setCurrentUser(cloneDeep(user))\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>CRUD App with Hooks</h1>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          {editing ? (\n            <Fragment>\n              <h2>编辑</h2>\n              <EditUserForm\n                editing={editing}\n                setEditing={setEditing}\n                currentUser={currentUser}\n                updateUser={updateUser}\n              />\n            </Fragment>\n          ) : (\n              <Fragment>\n                <h2>新增</h2>\n                <AddUserForm addUser={addUser} />\n              </Fragment>\n            )}\n        </div>\n        <div className=\"flex-large\">\n          <h2>用户列表</h2>\n          <UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}